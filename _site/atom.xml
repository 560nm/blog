<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Curtis Larson's Blog</title>
 <link href="http://curtismlarson.com/blog/atom.xml" rel="self"/>
 <link href="http://curtismlarson.com/blog"/>
 <updated>2015-11-20T11:45:42-05:00</updated>
 <id>http://curtismlarson.com/blog</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>xw
   <title>Meteor - Wrap and Publish a NPM package</title>
   <link href="http://curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package/"/>
   <updated>2015-11-20T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Building off of my previous tutorial on &lt;a href=&quot;www.curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/&quot;&gt;how to create a package in Meteor&lt;/a&gt; I decided to create another tutorial on how to wrap and publish a NPM package. There are thousands of useful npm packages that can be used through &lt;code&gt;meteorhacks:npm&lt;/code&gt;, but sometimes it’s nice to create a meteor smart package and add some extra functionality to make it even easier to include in your project.&lt;/p&gt;

&lt;p&gt;For this tutorial I will be wrapping the &lt;a href=&quot;https://github.com/t3chnoboy/amazon-product-api&quot;&gt;Amazon Product Api&lt;/a&gt; Node.js client. The full source code for the Meteor package is available on my GitHub &lt;a href=&quot;https://github.com/quackware/meteor-amazon-product-api&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-steps&quot;&gt;The Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-a-package&quot;&gt;1. Create a package&lt;/h3&gt;

&lt;p&gt;Similar to the &lt;a href=&quot;www.curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/&quot;&gt;how to create a package&lt;/a&gt; tutorial, we need to create a new package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --package atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;edit-the-packagejs-file&quot;&gt;2. Edit the package.js file&lt;/h3&gt;

&lt;p&gt;Now we need to make some edits to the &lt;code&gt;package.js&lt;/code&gt; file to specify our Npm dependency and point the package to our server file where we will be making some Meteor specific customizations. First we add the following Npm dependency&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Npm.depends({
  &quot;amazon-product-api&quot;: &quot;0.3.5&quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we also need to add an export in the &lt;code&gt;Package.onUse&lt;/code&gt; block, we’re going to choose &lt;code&gt;AmazonProductApi&lt;/code&gt; as our export.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package.onUse(function(api) {
  api.versionsFrom('1.2.1');
  api.export(&quot;AmazonProductApi&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Finally we need to reference the javascript file in &lt;code&gt;package.js&lt;/code&gt; that will glue together the Npm package with Meteor.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Package.onUse(function(api) {
  api.versionsFrom('1.2.1');
  api.export(&quot;AmazonProductApi&quot;);
  api.addFiles([&quot;server/amazon-product-api.js&quot;], &quot;server&quot;);
});
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;the-glue-file&quot;&gt;3. The Glue File&lt;/h3&gt;

&lt;p&gt;Go ahead and create the &lt;code&gt;amazon-product-api.js&lt;/code&gt; file.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir server
touch server/amazon-product-api.js
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In this file we can add our &lt;code&gt;Npm.require&lt;/code&gt; and setup the object we need to export.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amazon = Npm.require(&quot;amazon-product-api&quot;);

AmazonProductApi = {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the amazon product api package has three functions: &lt;code&gt;itemSearch&lt;/code&gt;, &lt;code&gt;itemLookup&lt;/code&gt;, and &lt;code&gt;browseNode&lt;/code&gt; that are exposed in the &lt;code&gt;createClient&lt;/code&gt; function. These functions have a future usage and a callback usage. Let’s go ahead and add a syncronous usage to better use it in our Meteor projects. To do this we just need to add the &lt;code&gt;createClient&lt;/code&gt; function to our exported object and wrap the functions using &lt;code&gt;Meteor.wrapAsync&lt;/code&gt;. Below is the full code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var amazon = Npm.require(&quot;amazon-product-api&quot;);

AmazonProductApi = {};

AmazonProductApi.createClient = function(credentials) {
  var client = amazon.createClient(credentials);
  client.itemSearchSync = Meteor.wrapAsync(client.itemSearch);
  client.itemLookupSync = Meteor.wrapAsync(client.itemLookup);
  client.browseNodeSync = Meteor.wrapAsync(client.browseNode);
  return client;
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;publishing-to-atmosphere&quot;&gt;4. Publishing to Atmosphere&lt;/h3&gt;

&lt;p&gt;Now that our package is complete, we can publish it to atmosphere so that other people can use it. Make sure you are in your package directory and type the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor publish --create
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Your package should now be built and uploaded to atmosphere.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! Now whenever someone wants to use the awesome &lt;a href=&quot;https://github.com/t3chnoboy/amazon-product-api&quot;&gt;Amazon Product Api&lt;/a&gt; npm package, they can just type &lt;code&gt;meteor add quackware:amazon-product-api&lt;/code&gt;. They can also take advantage of our new syncronous functions we added. Again, the full source code for the Meteor package is available on my GitHub &lt;a href=&quot;https://github.com/quackware/meteor-amazon-product-api&quot;&gt;here&lt;/a&gt;. Leave a message if you have any questions or comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>MobileVideoDownloader.com built in Meteor</title>
   <link href="http://curtismlarson.com/blog/2015/11/19/mobile-video-downloader/"/>
   <updated>2015-11-19T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/19/mobile-video-downloader</id>
   <content type="html">&lt;h2 id=&quot;mobile-video-downloader&quot;&gt;Mobile Video Downloader&lt;/h2&gt;

&lt;p&gt;Just finished the first round of another simple website &lt;a href=&quot;http://www.mobilevideodownloader.com&quot;&gt;Mobile Video Downloader&lt;/a&gt;. It’s just a basic video downloader (with search) that is optimized for mobile devices. Building it in Meteor enabled me to finish this site ultra fast.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The entire website is open source and available on my github &lt;a href=&quot;https://github.com/quackware/mobilevideodownloader&quot;&gt;here&lt;/a&gt;. Make sure to leave any comments or suggestions you have!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Create a Package</title>
   <link href="http://curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package/"/>
   <updated>2015-11-19T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/19/meteor-how-to-create-package</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I usually always have to google the steps to create a Meteor package, so I figured I would do a write up for myself that I can reference. I hope this helps anyone else that has trouble creating a meteor package&lt;/p&gt;

&lt;h2 id=&quot;the-steps&quot;&gt;The Steps&lt;/h2&gt;

&lt;h3 id=&quot;create-the-package&quot;&gt;1. Create the package&lt;/h3&gt;

&lt;p&gt;Open a terminal and navigate to the directory you want to store the package in. Type&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor create --package atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-the-test-application&quot;&gt;2. Create the test application&lt;/h3&gt;

&lt;p&gt;Enter the following commands. This will create a test app you can use to test your package.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd packagename
meteor create test-app
cd test-app
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;create-a-packages-folder-for-test-app&quot;&gt;3. Create a packages folder for test-app&lt;/h3&gt;

&lt;p&gt;We need a place to store our new package in our test app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir packages
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;symlink-your-package-to-the-test-app&quot;&gt;4. Symlink your package to the test-app&lt;/h3&gt;

&lt;p&gt;Now we can link our new package into our test-app, so that any modifications we make to the package will show up in our app.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd packages
ln -s ../../../packagename ./packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;add-the-package&quot;&gt;5. Add the package&lt;/h3&gt;

&lt;p&gt;All that’s left is to add the package to our test-app&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor add atmosphereusername:packagename
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it. Now when you run &lt;code&gt;meteor list&lt;/code&gt; in your test-app you should see the packagename show up. If you are interested in wrapping a npm package in a Meteor package you can also check out my new tutorial, &lt;a href=&quot;http://www.curtismlarson.com/blog/2015/11/20/meteor-wrap-publish-npm-package/&quot;&gt;Meteor - Wrap and Publish a NPM package&lt;/a&gt;. Now go write the next awesome meteor package!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>RandomPowerHour.com built in Meteor</title>
   <link href="http://curtismlarson.com/blog/2015/11/17/random-power-hour/"/>
   <updated>2015-11-17T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/17/random-power-hour</id>
   <content type="html">&lt;h2 id=&quot;random-power-hour&quot;&gt;Random Power Hour&lt;/h2&gt;

&lt;p&gt;I recently just wrapped up a small one day project. Building a random power hour creator in Meteor. It pulls YouTube videos from a selected playlist, mixes them up, and plays random clips from them, creating the perfect drinking game! You can visit the site below:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.randompowerhour.com&quot;&gt;Random Power Hour&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;The entire website is open source and available on my github &lt;a href=&quot;https://github.com/quackware/meteor-randomhour&quot;&gt;here&lt;/a&gt;. Make sure to leave any comments or suggestions you have.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - iron:router Scroll to Top</title>
   <link href="http://curtismlarson.com/blog/2015/11/11/iron-router-scroll-to-top/"/>
   <updated>2015-11-11T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/11/iron-router-scroll-to-top</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;I use the awesome &lt;a href=&quot;https://github.com/iron-meteor/iron-router&quot;&gt;iron:router&lt;/a&gt; package in all my Meteor projects. One problem I run into in almost all packages is if you use &lt;code&gt;Router.go()&lt;/code&gt; while scrolled down onto the page, your next page will rendered still scrolled at the same point. Here is some code that will fix that and scroll to the top of the page on each route.&lt;/p&gt;

&lt;h2 id=&quot;the-code&quot;&gt;The Code&lt;/h2&gt;

&lt;p&gt;We are just going to use a simple &lt;code&gt;autorun&lt;/code&gt; function that depends on the reactive &lt;code&gt;Router.current()&lt;/code&gt; object. Check out the code below&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/a66c39297edd0c139446.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;That’s it! Very simple, but something I always include in my boilerplate code when I first create an application. Make sure to leave any questions or comments you have.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to Deploy a Meteor project to AWS EC2</title>
   <link href="http://curtismlarson.com/blog/2015/11/03/deploy-meteor-to-aws/"/>
   <updated>2015-11-03T00:00:00-05:00</updated>
   <id>http://curtismlarson.com/blog/2015/11/03/deploy-meteor-to-aws</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;This is a step by step guide on how to deploy a Meteor project to Amazon Web Services (AWS). This guide assumes you have little to no technical knowledge of AWS or Meteor and you start out with a zipped file containing your Meteor project. It also assumes you have knowledge of basic unix commands like cd, ls, and mkdir. I am also assuming you are using a mac / linux based computer. Let’s get started!&lt;/p&gt;

&lt;h2 id=&quot;the-tools&quot;&gt;The Tools&lt;/h2&gt;

&lt;p&gt;The first tool you need is Node.js which is available &lt;a href=&quot;https://nodejs.org/en/&quot;&gt;here&lt;/a&gt;. After you have node installed you can bring up your terminal and type &lt;code&gt;npm&lt;/code&gt; to make sure you have the Node package manager installed correctly (See below image).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/HAQGTua.png&quot; alt=&quot;npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once you verify that npm is installed you need to install &lt;a href=&quot;https://github.com/arunoda/meteor-up&quot;&gt;Meteor Up&lt;/a&gt; through npm which will help us deploy the project to an ec2 server. You can install it by typing the following command in your terminal.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g mup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/pylYMVS.png&quot; alt=&quot;Install mup npm&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You also need to install meteor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;npm install -g meteor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now need to navigate to your project directory via the terminal. If you are familiar with the &lt;code&gt;ls&lt;/code&gt; and &lt;code&gt;cd&lt;/code&gt; unix commands it should be pretty straightforward.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd /path/to/project/directory
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you are unfamiliar with unix commands you can navigate to System Preferences -&amp;gt; Keyboard -&amp;gt; Services (Left Hand Side) -&amp;gt; Scroll down and check the &lt;code&gt;New Terminal at Folder&lt;/code&gt; checkbox.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/1EsrGt2.png&quot; alt=&quot;New Terminal At Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now you can right click your project folder in Finder -&amp;gt; Services -&amp;gt; New Terminal at Folder which will open a terminal in your project directory.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/SbQ6z6w.png&quot; alt=&quot;New Terminal At Folder&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you are in your deployment directory you must create a new file named &lt;code&gt;mup.json&lt;/code&gt; and copy and paste the below code and save the file (You can do this either through the Terminal or Finder).&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4aad8874a59ec2624e4c.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;We will be changing some of these values later on in the tutorial once we have setup our server.&lt;/p&gt;

&lt;h2 id=&quot;aws-management-console&quot;&gt;AWS Management Console&lt;/h2&gt;

&lt;p&gt;Login to your &lt;a href=&quot;https://aws.amazon.com/console/&quot;&gt;AWS Management Console&lt;/a&gt; and you should see a screen similar to below (If you don’t have an AWS account, they are very straightforward to create and is not covered by this tutorial)&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/RThAxXC.png&quot; alt=&quot;AWS Console&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Click on the &lt;code&gt;EC2&lt;/code&gt; option in the top left and select the blue &lt;code&gt;Launch Instance&lt;/code&gt; option. On the next screen you should see a selection of different server types. You will want to pick the &lt;code&gt;Ubuntu Server SSD Volume Type&lt;/code&gt; since it works best with &lt;code&gt;mup&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/u6kwg7w.png&quot; alt=&quot;Ubunutu AMI&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You will now be greeted with a selection of different instance types. For my simple project I will be using a free tier option, but you should do your research or &lt;a href=&quot;&amp;#109;&amp;#097;&amp;#105;&amp;#108;&amp;#116;&amp;#111;:&amp;#099;&amp;#117;&amp;#114;&amp;#116;&amp;#105;&amp;#115;&amp;#064;&amp;#099;&amp;#117;&amp;#114;&amp;#116;&amp;#105;&amp;#115;&amp;#109;&amp;#108;&amp;#097;&amp;#114;&amp;#115;&amp;#111;&amp;#110;&amp;#046;&amp;#099;&amp;#111;&amp;#109;&amp;#063;&amp;#115;&amp;#117;&amp;#098;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#061;&amp;#073;&amp;#032;&amp;#110;&amp;#101;&amp;#101;&amp;#100;&amp;#032;&amp;#104;&amp;#101;&amp;#108;&amp;#112;&amp;#032;&amp;#115;&amp;#101;&amp;#116;&amp;#116;&amp;#105;&amp;#110;&amp;#103;&amp;#032;&amp;#117;&amp;#112;&amp;#032;&amp;#109;&amp;#121;&amp;#032;&amp;#077;&amp;#101;&amp;#116;&amp;#101;&amp;#111;&amp;#114;&amp;#032;&amp;#112;&amp;#114;&amp;#111;&amp;#106;&amp;#101;&amp;#099;&amp;#116;&amp;#033;&quot;&gt;ask a meteor expert&lt;/a&gt; if you are unsure on what tier option to use. Go ahead and select &lt;code&gt;Next: Configure Instance Details&lt;/code&gt; to continue.&lt;/p&gt;

&lt;h2 id=&quot;setting-up-server-options&quot;&gt;Setting up Server Options&lt;/h2&gt;

&lt;p&gt;The next steps will be based on what type of app you have. Most people will not need to change anything on the &lt;code&gt;Configure Instance Details&lt;/code&gt; page, so go ahead and select &lt;code&gt;Next: Add Storage&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you think your app requires additional storage (most will not as long as you chose the correct server in the above app) you can add volumes in this screen. If anyone is curious on how to add additional volumes for their Meteor app just leave a comment and I will update the guide&lt;/p&gt;

&lt;p&gt;On Step 5: Tag Instance, just give your server a useful name that reflects your meteor project and proceed to the next step&lt;/p&gt;

&lt;h2 id=&quot;configure-security-groups&quot;&gt;Configure Security Groups&lt;/h2&gt;

&lt;p&gt;Setting up correct security groups is important for any app you host on AWS. You want to allow ssh traffic for mup and if you want to ssh into your server in the future, and http/https traffic for people visiting your website. You can also specify ssh rules for only your IP address as an additional security precaution. Using the below configuration should work for most people&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/2M7BaiE.png&quot; alt=&quot;Configure Security Group&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you have added your security groups you can go ahead and click &lt;code&gt;Review and Launch&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&quot;keypair--launching-your-instance&quot;&gt;Keypair &amp;amp; Launching Your Instance&lt;/h2&gt;

&lt;p&gt;After reviewing your instance information you can go ahead and click &lt;code&gt;Launch&lt;/code&gt;. This will launch a popup asking you to use an existing or create a new keypair. We are going to create a new one and download it. It is very important that you keep the keypair in a secure location, this file will be used by &lt;code&gt;mup&lt;/code&gt; and anyone else that wants to ssh into your server (As long as they are added to the ssh rules for your instance). Once the file is downloaded click &lt;code&gt;Launch Instance&lt;/code&gt; again. Go ahead and click &lt;code&gt;View Instance&lt;/code&gt; and you will be directed to your instance dashboard.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/fEXcJ50.png&quot; alt=&quot;Creating keypair&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;getting-instance-information&quot;&gt;Getting instance information&lt;/h2&gt;

&lt;p&gt;Now that we have successfully launched our instance we need to get some information from the instance dashboard so that mup can deploy the meteor project. Once the instance is running select it from the list and record the &lt;code&gt;Public IP&lt;/code&gt; value.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/0S5c3hl.png&quot; alt=&quot;Public IP&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now navigate to where you saved your .pem file via the terminal (either through unix commands or the New Terminal at Folder method). Type the following command into the terminal:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;chmod 400 name-of-pem.pem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/2WVjf2g.png&quot; alt=&quot;chmod&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This will allow ssh and mup access to your pem file. You can now test to see if you can ssh into your server with the following command:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh -i /path/to/pem.pem ubuntu@public-ip-address
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/TZLBgqW.png&quot; alt=&quot;SSH amazon&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you have successfully connected to your server, Congratulations! Now all you need to do is edit your &lt;code&gt;mup.json&lt;/code&gt; file.&lt;/p&gt;

&lt;h2 id=&quot;editing-the-mupjson-file&quot;&gt;Editing the mup.json file&lt;/h2&gt;

&lt;p&gt;Once your &lt;code&gt;mup.json&lt;/code&gt; file is open, you need to change the following values:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&quot;host&quot;: &quot;hostname&quot; -&amp;gt; &quot;host&quot;: &quot;PUBLIC_IP_ADDRESS&quot;
&quot;username&quot;:&quot;root&quot; -&amp;gt; &quot;username&quot;:&quot;ubuntu&quot;
&quot;password&quot;:&quot;password&quot; -&amp;gt; //&quot;password&quot;:&quot;password&quot;
//&quot;pem&quot;:&quot;~/.ssh/id_rsa&quot; -&amp;gt; &quot;pem&quot;:&quot;path/to/your/pemfile.pem&quot;
&quot;app&quot;: &quot;/path/to/the/app&quot; -&amp;gt; &quot;app&quot;: &quot;[the local path of your app]&quot;,
&quot;appName&quot;:&quot;meteor&quot; -&amp;gt; &quot;appName&quot;:&quot;[your-app-name]&quot;
&quot;ROOT_URL&quot;:&quot;http://myapp.com&quot; -&amp;gt; &quot;ROOT_URL&quot;:&quot;[whatever your url is]&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Save and exit your text editor.&lt;/p&gt;

&lt;h2 id=&quot;deploying-with-mup&quot;&gt;Deploying with Mup&lt;/h2&gt;

&lt;p&gt;Navigate to your project directory in a terminal and run the following commands:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mup setup
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If all goes well you should see the following output. If something bad happens double check all your values in your mup.json file&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/GNONEGV.png&quot; alt=&quot;mup setup&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that mup has installed all the necessary requirements for Meteor on your server. You can type the following command to upload your project to the server.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mup deploy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&quot;http://imgur.com/4uGXf6s.png&quot; alt=&quot;mup deploy&quot; /&gt;&lt;/p&gt;

&lt;p&gt;That’s it! You can now check out your app either directly through your public ip address or through the ROOT_URL you set (as long as your DNS records are set up correctly). If you have any questions or requests for additions to this guide, just leave them in the comments!&lt;/p&gt;

</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Dynamically Render a PDF with iron:router</title>
   <link href="http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router/"/>
   <updated>2015-09-11T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A cool trick I found out recently is how to dynamically render a pdf from the server to the client using iron:router. The idea is you have a pdf object stored in a database or external file store and you want to transfer that pdf to the client without directly accessing the pdf file. We are going to accomplish this with a server side iron:router route. You can access the full code for this tutorial on my GitHub page &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-route-file&quot;&gt;The Route File&lt;/h2&gt;

&lt;p&gt;The first method of rendering the pdf from the server involves the wonderful &lt;a href=&quot;https://github.com/CollectionFS/Meteor-CollectionFS&quot;&gt;CollectionFS&lt;/a&gt; package which can be used to store files in a variety of different data stores including mongoDB, dropbox, and Amazon S3. We can accomplish this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/c13931a2e2c9b4216b88.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some important thigns to note include the creation of a readable object through &lt;code&gt;file.createReadStream(&quot;tmp&quot;)&lt;/code&gt; which we then read into the &lt;code&gt;buffer&lt;/code&gt; object. Once we have completely read from the &lt;code&gt;FS.File&lt;/code&gt; object we can write the response to the client through the node &lt;code&gt;this.response.write(buffer);&lt;/code&gt; statement. Also make sure to include the &lt;code&gt;where: &quot;server&quot;&lt;/code&gt; in the route to ensure that it only executes as a server side route.&lt;/p&gt;

&lt;p&gt;An additional way to render a pdf from the server to the client is to read the pdf from the file system, read it into a buffer using the node.js &lt;code&gt;fs&lt;/code&gt; package, and feed it to the client. Make sure you install the &lt;code&gt;meteorhacks:npm&lt;/code&gt; package so you can include the &lt;code&gt;fs&lt;/code&gt; node.js package. You can accomplish all this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/52d139c978bb05535cff.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pretty straight forward and similar to the above gist.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for this tutorial, hopefully it helps out anyone who wants to dynamically render a pdf from the server without directly accessing the file. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - MongoDB Object Array Property Selector</title>
   <link href="http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector/"/>
   <updated>2015-08-08T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One slightly confusing question that I get asked sometimes and I see around the internet is how to select a document from a collection based on a property in an array of objects.&lt;/p&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;SimpleSchema&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Schema = {};

Schema.Task = new SimpleSchema({
  name: {
    type: String,
    label: &quot;Task Name&quot;
  },
  tags: {
    type: [Object],
    label: &quot;Tags&quot;,
  },
  &quot;tags.$.name&quot;: {
    type: String
  },
  &quot;tags.$.rank&quot;: {
    type: Number
  }
});

Tasks.attachSchema(Schema.Task);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have inserted the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.insert({
  name: &quot;Write Meteor Tutorial&quot;,
  tags: [
    {
      &quot;name&quot;: &quot;Meteor&quot;,
      &quot;rank&quot;: 0
    },
    {
      &quot;name&quot;: &quot;Tutorial&quot;,
      &quot;rank&quot;: 1
    }
  ]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we want to select all the tasks that have a tag with the name “Meteor”. We can use the following syntax to perform this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we did not include the &lt;code&gt;$&lt;/code&gt; symbol that we used when specifying our &lt;code&gt;SimpleSchema&lt;/code&gt;. Additionally if we only want to select the tags and not the entire &lt;code&gt;Tasks&lt;/code&gt; object we can use a &lt;code&gt;fields&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
}, {
  fields: { &quot;tags.$&quot;: 1}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The differing syntax may seem a bit confusing, but once you get the hang of it you can create some pretty powerful and complex schemas and selectors. Hope this helps anyone running into this problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Send Template Emails from the Server with Mailgun</title>
   <link href="http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun/"/>
   <updated>2015-07-30T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial I will show you how I have been sending template emails from the server with Mailgun. This is very useful if you want to send transactional or newsletter emails using a pre existing template, but you also want to dynamically populate the email with data from one of your Collections. The full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;This tutorial requires the following dependencies (which will be auto downloaded if you clone the tutorial directly):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iron:router
meteorhacks:npm
meteorhacks:ssr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally you need to specify the following &lt;code&gt;meteorhacks:npm&lt;/code&gt; dependency in a &lt;code&gt;package.json&lt;/code&gt; file in your root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;mailgun&quot;: &quot;0.5.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-email-template&quot;&gt;The Email Template&lt;/h2&gt;

&lt;p&gt;For this tutorial I chose a basic email template (modified slightly for Meteor specific stuff) from the mailgun website. It is &lt;strong&gt;IMPORTANT&lt;/strong&gt; that you put the template file in the &lt;code&gt;private/&lt;/code&gt; directory of your project so that it can be accessed by &lt;code&gt;Assets.getText&lt;/code&gt; on the server. I created the following file and placed it at &lt;code&gt;private/email-template.html&lt;/code&gt;. Note the placeholders &lt;code&gt;mainTitle&lt;/code&gt;, &lt;code&gt;tasks&lt;/code&gt;, &lt;code&gt;task.title&lt;/code&gt;, &lt;code&gt;task.url&lt;/code&gt;, and &lt;code&gt;unsubscribe&lt;/code&gt;. You will see how we will replace those placeholders with data from our collection later.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/341cd73d196236f78b31.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;startup-code&quot;&gt;Startup Code&lt;/h2&gt;

&lt;p&gt;Now that we have our email template, we need to add some code to our server that is run on startup. I created a file called &lt;code&gt;startup.js&lt;/code&gt; that will setup our template rendering system and setup our mailgun settings. The code can be seen below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4f30b6007e89a45766b9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice the creation of a &lt;code&gt;templates&lt;/code&gt; array, which we push a single name and path to. The name is used when we want to reference a specific template when we send an email and the path references the relative location of the template html file to the &lt;code&gt;private/&lt;/code&gt; directory. This template array is passed to a &lt;code&gt;EmailGenerator&lt;/code&gt; object which we will implement in the next section. Another important thing to note is the various &lt;code&gt;Meteor.settings&lt;/code&gt; variables I use in setting up my stmp &lt;code&gt;MAIL_URL&lt;/code&gt;. These variables are read from a &lt;code&gt;settings.json&lt;/code&gt; file that is loaded when you start meteor like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor --settings settings.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example settings.json file for this tutorial would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/b70c9cf3c43fa0e01c13.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;mailgun&quot;&gt;Mailgun&lt;/h2&gt;

&lt;p&gt;The mailgun code is composed of a single &lt;code&gt;Meteor.method&lt;/code&gt; that takes in basic email information and forwards it to the mailgun api we imported using &lt;code&gt;meteorhacks:npm&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/41cd6ba173d14a66557a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note that we use &lt;code&gt;sendRaw&lt;/code&gt; here to take advantage of html emails, which requires us to format the rest of the email body manually.&lt;/p&gt;

&lt;h2 id=&quot;emailgenerator&quot;&gt;EmailGenerator&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EmailGenerator&lt;/code&gt; object contains two simple methods, one we saw above that compiles each template html file using &lt;code&gt;meteorhacks:ssr&lt;/code&gt;, and another that generates the html from the compiled template. You can see the code for the &lt;code&gt;EmailGenerator&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/820b7cc9f7f5f7ee24ec.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A few important things to note is the &lt;code&gt;templateName&lt;/code&gt; argument of &lt;code&gt;generateHtml&lt;/code&gt; which is used to referene the template we passed in with &lt;code&gt;addTemplates&lt;/code&gt;, and also the &lt;code&gt;data&lt;/code&gt; parameter of &lt;code&gt;generateHtml&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; parameter is what will populate the various handlebar templates in our &lt;code&gt;email-templates.html&lt;/code&gt; file. This data will come from our Meteor collection we set up in the next section.&lt;/p&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is composed of two very basic &lt;code&gt;Meteor.methods&lt;/code&gt;: &lt;code&gt;addTask&lt;/code&gt; and &lt;code&gt;sendEmail&lt;/code&gt;. Both of these methods will be called from the client code that we implement in the next section.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/1f06550d64a7770a8fad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;addTask&lt;/code&gt; does exactly what it’s name implies, adds a task composed of a title and url to a Mongo.collection we created with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks = new Mongo.Collection(&quot;tasks&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;specified in a seperate javascript file (You can add that line anywhere in the server code). &lt;code&gt;sendEmail&lt;/code&gt; is slightly more complicated, but basically acts as the glue between all our previously implemented code. It pulls all the tasks from the database, creates that data object that we then pass to &lt;code&gt;EmailGenerator.generateHtml&lt;/code&gt;, and calls the &lt;code&gt;sendMailGunEmail&lt;/code&gt; method with the generated email html which forwards the email to our mailgun api.&lt;/p&gt;

&lt;h2 id=&quot;client-code&quot;&gt;Client Code&lt;/h2&gt;

&lt;p&gt;Finally we need to create some basic client code where the user can enter a title and a url for a “task”. This task data will be sent to the server where we will insert it into the &lt;code&gt;Tasks&lt;/code&gt; collection. We can then pull data from this &lt;code&gt;Tasks&lt;/code&gt; collection and use it to populate our email template that we will create.&lt;/p&gt;

&lt;p&gt;In addition to adding tasks, we will let the user be able to click a button to send an email. This code will just perform a basic &lt;code&gt;Meteor.call&lt;/code&gt; which will call into our template generating and email sending code on the server. You can see the two files, &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/831b9cb8df0e9c849adb.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/quackware/57643c6fe549eab61695.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this helps our anyone that was interested in how to send template emails from the server with mailgun. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Windows update cannot convert null to object</title>
   <link href="http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object/"/>
   <updated>2015-07-23T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object</id>
   <content type="html">&lt;h2 id=&quot;cannot-convert-null-to-object&quot;&gt;Cannot Convert Null To Object&lt;/h2&gt;

&lt;p&gt;While attempting to update one of my meteor projects on my windows box, I ran into the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NvtJjoq.png&quot; alt=&quot;Cannot convert null to object&quot; title=&quot;Cannot convert null to object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Attempting to update the meteor binary through &lt;code&gt;meteor update&lt;/code&gt; yielded the same error.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix&quot;&gt;How to Fix&lt;/h2&gt;

&lt;p&gt;In order to fix the error, I actually had to completely uninstall meteor and reinstall from &lt;a href=&quot;https://win.meteor.com/&quot;&gt;https://win.meteor.com/&lt;/a&gt;. After everything was installed, &lt;code&gt;meteor update&lt;/code&gt; worked fine. Hope this helps anyone encountering the same problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to use iron:router waitOn with an Async Server Call</title>
   <link href="http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server/"/>
   <updated>2015-05-04T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server</id>
   <content type="html">&lt;h2 id=&quot;how-to-use-ironrouter-waiton-with-an-async-server-call&quot;&gt;How to use iron:router waitOn with an Async Server Call&lt;/h2&gt;

&lt;p&gt;There have been several &lt;a href=&quot;http://stackoverflow.com/questions/29493809/how-to-make-onbeforeaction-call-wait-until-a-function-call-inside-finishes-in-me/&quot;&gt;posts&lt;/a&gt; about utilizing iron:router’s &lt;code&gt;waitOn&lt;/code&gt; functionality for an async server call. After being disatisfied with a lot of the solutions, including my own in the aforementioned stackoverflow post, I decided to write up a simple solution that had a minimal amount of extra code in the routes file. A couple of problems that I (and many others) ran into included the &lt;code&gt;waitOn&lt;/code&gt; function running in an &lt;a href=&quot;http://stackoverflow.com/questions/25136239/meteor-0-8-3-iron-router-infinite-loop-inside-waiton-hook&quot;&gt;infinite loop&lt;/a&gt;, and also &lt;code&gt;waitOn&lt;/code&gt; &lt;a href=&quot;https://github.com/iron-meteor/iron-router/issues/1031&quot;&gt;executing twice&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;client-routes-file&quot;&gt;Client Routes File&lt;/h2&gt;

&lt;p&gt;The client routes.js file is very simple, as the core functionality is contained in a different file. Basically what I am doing is returning a &lt;code&gt;Util.waitOnServer&lt;/code&gt; call which will call the &lt;code&gt;testWaitOn&lt;/code&gt; Meteor method on the server. You can optionally pass in arguments to &lt;code&gt;Util.waitOnServer&lt;/code&gt; to pass data to the Meteor method. Once this call returns, we can then access the data through &lt;code&gt;Util.getResponse&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/71290757e28d7df89540.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;utilwaitonserver&quot;&gt;Util.waitOnServer&lt;/h2&gt;

&lt;p&gt;The Util object contains all the functionality of waiting on &lt;code&gt;Meteor.call&lt;/code&gt;. Functionality such as &lt;code&gt;getResponse&lt;/code&gt; can be easily changed to something more eloquent, and you can also change the &lt;code&gt;Meteor.call&lt;/code&gt; to be any async call. The arugments from &lt;code&gt;Util.waitOnServer&lt;/code&gt; are forwarded to the Meteor method here.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/eea7818fde0cda6a35c3.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is very simple, it just generates a random number and returns it. I also printed out the &lt;code&gt;data&lt;/code&gt; argument passed to us from the client. I just wanted a way to make sure everything was being executed in the correct order.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/703e6cf54c24f7f9b16f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The full source code is available &lt;a href=&quot;https://github.com/quackware/meteor-waitOnServer&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please post them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Trigger a Function when a Session Value Changes</title>
   <link href="http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable/"/>
   <updated>2015-04-27T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable</id>
   <content type="html">&lt;h2 id=&quot;how-to-trigger-a-function-when-a-session-value-changes&quot;&gt;How to Trigger a Function when a Session Value Changes&lt;/h2&gt;

&lt;p&gt;While working on a Meteor project, I wanted to trigger a function whenever I changed the value of a Session variable through &lt;code&gt;Session.set()&lt;/code&gt;. It took me a little bit of experimentation and digging to figure out how to do it, and the result is pretty simple.&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-it&quot;&gt;How to do it&lt;/h2&gt;

&lt;p&gt;Use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var doSomething = function() {
  // Do something when the session value changes
}

Deps.autorun(function() {
  var sessionVal = Session.get(&quot;yourSessionVariable&quot;);
  console.log(&quot;The session value has changed&quot;);
  doSomething();
});

var anotherFunction = function() {
  Session.set(&quot;yourSessionVariable&quot;, &quot;foo&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Whenever &lt;code&gt;anotherFunction&lt;/code&gt; is executed, or whenever the session value &lt;code&gt;yourSessionVariable&lt;/code&gt; is changed in any other function, the function in the &lt;code&gt;Deps.autorun()&lt;/code&gt; block will execute. Simple!&lt;/p&gt;

&lt;h2 id=&quot;depsautorun&quot;&gt;Deps.autoRun&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Deps.autoRun()&lt;/code&gt; is the key here, as it can make arbitrary blocks of code reactive. &lt;code&gt;Session&lt;/code&gt; is already a reactive variable, so we do not need to go through the trouble of using &lt;code&gt;Deps.Dependency&lt;/code&gt;. You can find more information about Deps &lt;a href=&quot;https://manual.meteor.com/#deps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to point a domain on Google Domains to GitHub pages</title>
   <link href="http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains/"/>
   <updated>2015-04-12T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains</id>
   <content type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-repository&quot;&gt;Setup repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-google-domains&quot;&gt;Configure Google Domains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When setting up my &lt;a href=&quot;http://www.curtismlarson.com&quot;&gt;website&lt;/a&gt; on Google Domains I had to read through several different guides to figure out all I needed to do to point it to a GitHub pages repository. I wrote up this guide to simplify the processes for anyone else performing this same task.&lt;/p&gt;

&lt;h2 id=&quot;setup-repository&quot;&gt;Setup repository&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt; and create a repository with the name &lt;strong&gt;USERNAME.github.com&lt;/strong&gt; or &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; and give it a nice description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zQ5BxEH.png&quot; alt=&quot;Create a repository&quot; title=&quot;Create a repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your new repository, create a &lt;strong&gt;CNAME&lt;/strong&gt; file in the root directory and add the following two entries (with curtismlarson replaced by your own domain):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LR37up5.png&quot; alt=&quot;CName&quot; title=&quot;CName&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These two entries tell GitHub to redirect any requests to &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; to the domain specified in the CNAME file. There are two entries to ensure that &lt;strong&gt;curtismlarson.com&lt;/strong&gt; will also redirect to &lt;strong&gt;www.curtismlarson.com&lt;/strong&gt;. If you prefer to have a site without the &lt;strong&gt;www&lt;/strong&gt; prefix, you can switch the order of the domains.&lt;/p&gt;

&lt;p&gt;Now verify that your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; domain is now pointing to your custom domain by going into the repository settings and verifying your GitHub Pages settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RsA5XUO.png&quot; alt=&quot;Github Pages&quot; title=&quot;GitHub Pages&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-google-domains&quot;&gt;Configure Google Domains&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://domains.google.com/registrar&quot;&gt;https://domains.google.com/registrar&lt;/a&gt; and select the &lt;strong&gt;DNS&lt;/strong&gt; option to configure your DNS records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oA40Qkq.png&quot; alt=&quot;Google Domains&quot; title=&quot;Google Domains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the very bottom of the page and add 3 Custom Resource Records. You need to add two “@” type A records that point to the GitHub ips &lt;strong&gt;192.30.252.153&lt;/strong&gt; and &lt;strong&gt;192.30.252.154&lt;/strong&gt; and one “www” CNAME record that points to your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; url:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xO3At1V.png&quot; alt=&quot;Custom Resource Records&quot; title=&quot;Custom Resource Records&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! DNS records often take more than a day to propagate so you may not see your website immediately. Once the changes have propagated your GitHub page and any project pages should be accessible from your new domain. For example &lt;a href=&quot;https://github.com/quackware/blog&quot;&gt;https://github.com/quackware/blog&lt;/a&gt; is hosting the blog you are reading right now and the domain works without any additional setup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Introduction</title>
   <link href="http://curtismlarson.com/blog/2015/04/11/introduction/"/>
   <updated>2015-04-11T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/11/introduction</id>
   <content type="html">&lt;p&gt;I’ll be using this site to talk about Software Development and what projects I’m working on. More to come!&lt;/p&gt;
</content>
 </entry>
 

</feed>
