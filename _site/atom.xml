<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Curtis Larson's Blog</title>
 <link href="http://curtismlarson.com/blog/atom.xml" rel="self"/>
 <link href="http://curtismlarson.com/blog"/>
 <updated>2015-09-11T20:18:19-04:00</updated>
 <id>http://curtismlarson.com/blog</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>xw
   <title>Meteor - Dynamically Render a PDF with iron:router</title>
   <link href="http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router/"/>
   <updated>2015-09-11T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/09/11/meteor-render-pdf-iron-router</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;A cool trick I found out recently is how to dynamically render a pdf from the server to the client using iron:router. The idea is you have a pdf object stored in a database or external file store and you want to transfer that pdf to the client without directly accessing the pdf file. We are going to accomplish this with a server side iron:router route. You can access the full code for this tutorial on my GitHub page &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;the-route-file&quot;&gt;The Route File&lt;/h2&gt;

&lt;p&gt;The first method of rendering the pdf from the server involves the wonderful &lt;a href=&quot;https://github.com/CollectionFS/Meteor-CollectionFS&quot;&gt;CollectionFS&lt;/a&gt; package which can be used to store files in a variety of different data stores including mongoDB, dropbox, and Amazon S3. We can accomplish this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/c13931a2e2c9b4216b88.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Some important thigns to note include the creation of a readable object through &lt;code&gt;file.createReadStream(&quot;tmp&quot;)&lt;/code&gt; which we then read into the &lt;code&gt;buffer&lt;/code&gt; object. Once we have completely read from the &lt;code&gt;FS.File&lt;/code&gt; object we can write the response to the client through the node &lt;code&gt;this.response.write(buffer);&lt;/code&gt; statement. Also make sure to include the &lt;code&gt;where: &quot;server&quot;&lt;/code&gt; in the route to ensure that it only executes as a server side route.&lt;/p&gt;

&lt;p&gt;An additional way to render a pdf from the server to the client is to read the pdf from the file system, read it into a buffer using the node.js &lt;code&gt;fs&lt;/code&gt; package, and feed it to the client. Make sure you install the &lt;code&gt;meteorhacks:npm&lt;/code&gt; package so you can include the &lt;code&gt;fs&lt;/code&gt; node.js package. You can accomplish all this with the below code:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/52d139c978bb05535cff.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Pretty straight forward and similar to the above gist.&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it for this tutorial, hopefully it helps out anyone who wants to dynamically render a pdf from the server without directly accessing the file. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-render-pdf&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - MongoDB Object Array Property Selector</title>
   <link href="http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector/"/>
   <updated>2015-08-08T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/08/08/meteor-mongodb-array-property-selector</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;One slightly confusing question that I get asked sometimes and I see around the internet is how to select a document from a collection based on a property in an array of objects.&lt;/p&gt;

&lt;p&gt;Suppose we have a &lt;code&gt;SimpleSchema&lt;/code&gt; like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Schema = {};

Schema.Task = new SimpleSchema({
  name: {
    type: String,
    label: &quot;Task Name&quot;
  },
  tags: {
    type: [Object],
    label: &quot;Tags&quot;,
  },
  &quot;tags.$.name&quot;: {
    type: String
  },
  &quot;tags.$.rank&quot;: {
    type: Number
  }
});

Tasks.attachSchema(Schema.Task);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we have inserted the following document:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.insert({
  name: &quot;Write Meteor Tutorial&quot;,
  tags: [
    {
      &quot;name&quot;: &quot;Meteor&quot;,
      &quot;rank&quot;: 0
    },
    {
      &quot;name&quot;: &quot;Tutorial&quot;,
      &quot;rank&quot;: 1
    }
  ]
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And we want to select all the tasks that have a tag with the name “Meteor”. We can use the following syntax to perform this task:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Notice how we did not include the &lt;code&gt;$&lt;/code&gt; symbol that we used when specifying our &lt;code&gt;SimpleSchema&lt;/code&gt;. Additionally if we only want to select the tags and not the entire &lt;code&gt;Tasks&lt;/code&gt; object we can use a &lt;code&gt;fields&lt;/code&gt; option.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks.find({
  &quot;tags.name&quot;: &quot;Meteor&quot;
}, {
  fields: { &quot;tags.$&quot;: 1}
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The differing syntax may seem a bit confusing, but once you get the hang of it you can create some pretty powerful and complex schemas and selectors. Hope this helps anyone running into this problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Send Template Emails from the Server with Mailgun</title>
   <link href="http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun/"/>
   <updated>2015-07-30T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/30/meteor-send-template-emails-from-server-mailgun</id>
   <content type="html">&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;In this tutorial I will show you how I have been sending template emails from the server with Mailgun. This is very useful if you want to send transactional or newsletter emails using a pre existing template, but you also want to dynamically populate the email with data from one of your Collections. The full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;

&lt;h2 id=&quot;dependencies&quot;&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;This tutorial requires the following dependencies (which will be auto downloaded if you clone the tutorial directly):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;iron:router
meteorhacks:npm
meteorhacks:ssr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally you need to specify the following &lt;code&gt;meteorhacks:npm&lt;/code&gt; dependency in a &lt;code&gt;package.json&lt;/code&gt; file in your root directory:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    &quot;mailgun&quot;: &quot;0.5.0&quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;the-email-template&quot;&gt;The Email Template&lt;/h2&gt;

&lt;p&gt;For this tutorial I chose a basic email template (modified slightly for Meteor specific stuff) from the mailgun website. It is &lt;strong&gt;IMPORTANT&lt;/strong&gt; that you put the template file in the &lt;code&gt;private/&lt;/code&gt; directory of your project so that it can be accessed by &lt;code&gt;Assets.getText&lt;/code&gt; on the server. I created the following file and placed it at &lt;code&gt;private/email-template.html&lt;/code&gt;. Note the placeholders &lt;code&gt;mainTitle&lt;/code&gt;, &lt;code&gt;tasks&lt;/code&gt;, &lt;code&gt;task.title&lt;/code&gt;, &lt;code&gt;task.url&lt;/code&gt;, and &lt;code&gt;unsubscribe&lt;/code&gt;. You will see how we will replace those placeholders with data from our collection later.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/341cd73d196236f78b31.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;startup-code&quot;&gt;Startup Code&lt;/h2&gt;

&lt;p&gt;Now that we have our email template, we need to add some code to our server that is run on startup. I created a file called &lt;code&gt;startup.js&lt;/code&gt; that will setup our template rendering system and setup our mailgun settings. The code can be seen below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/4f30b6007e89a45766b9.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Notice the creation of a &lt;code&gt;templates&lt;/code&gt; array, which we push a single name and path to. The name is used when we want to reference a specific template when we send an email and the path references the relative location of the template html file to the &lt;code&gt;private/&lt;/code&gt; directory. This template array is passed to a &lt;code&gt;EmailGenerator&lt;/code&gt; object which we will implement in the next section. Another important thing to note is the various &lt;code&gt;Meteor.settings&lt;/code&gt; variables I use in setting up my stmp &lt;code&gt;MAIL_URL&lt;/code&gt;. These variables are read from a &lt;code&gt;settings.json&lt;/code&gt; file that is loaded when you start meteor like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;meteor --settings settings.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An example settings.json file for this tutorial would look something like this:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/b70c9cf3c43fa0e01c13.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;mailgun&quot;&gt;Mailgun&lt;/h2&gt;

&lt;p&gt;The mailgun code is composed of a single &lt;code&gt;Meteor.method&lt;/code&gt; that takes in basic email information and forwards it to the mailgun api we imported using &lt;code&gt;meteorhacks:npm&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/41cd6ba173d14a66557a.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Note that we use &lt;code&gt;sendRaw&lt;/code&gt; here to take advantage of html emails, which requires us to format the rest of the email body manually.&lt;/p&gt;

&lt;h2 id=&quot;emailgenerator&quot;&gt;EmailGenerator&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;EmailGenerator&lt;/code&gt; object contains two simple methods, one we saw above that compiles each template html file using &lt;code&gt;meteorhacks:ssr&lt;/code&gt;, and another that generates the html from the compiled template. You can see the code for the &lt;code&gt;EmailGenerator&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/820b7cc9f7f5f7ee24ec.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;A few important things to note is the &lt;code&gt;templateName&lt;/code&gt; argument of &lt;code&gt;generateHtml&lt;/code&gt; which is used to referene the template we passed in with &lt;code&gt;addTemplates&lt;/code&gt;, and also the &lt;code&gt;data&lt;/code&gt; parameter of &lt;code&gt;generateHtml&lt;/code&gt;. The &lt;code&gt;data&lt;/code&gt; parameter is what will populate the various handlebar templates in our &lt;code&gt;email-templates.html&lt;/code&gt; file. This data will come from our Meteor collection we set up in the next section.&lt;/p&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is composed of two very basic &lt;code&gt;Meteor.methods&lt;/code&gt;: &lt;code&gt;addTask&lt;/code&gt; and &lt;code&gt;sendEmail&lt;/code&gt;. Both of these methods will be called from the client code that we implement in the next section.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/1f06550d64a7770a8fad.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;code&gt;addTask&lt;/code&gt; does exactly what it’s name implies, adds a task composed of a title and url to a Mongo.collection we created with&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Tasks = new Mongo.Collection(&quot;tasks&quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;specified in a seperate javascript file (You can add that line anywhere in the server code). &lt;code&gt;sendEmail&lt;/code&gt; is slightly more complicated, but basically acts as the glue between all our previously implemented code. It pulls all the tasks from the database, creates that data object that we then pass to &lt;code&gt;EmailGenerator.generateHtml&lt;/code&gt;, and calls the &lt;code&gt;sendMailGunEmail&lt;/code&gt; method with the generated email html which forwards the email to our mailgun api.&lt;/p&gt;

&lt;h2 id=&quot;client-code&quot;&gt;Client Code&lt;/h2&gt;

&lt;p&gt;Finally we need to create some basic client code where the user can enter a title and a url for a “task”. This task data will be sent to the server where we will insert it into the &lt;code&gt;Tasks&lt;/code&gt; collection. We can then pull data from this &lt;code&gt;Tasks&lt;/code&gt; collection and use it to populate our email template that we will create.&lt;/p&gt;

&lt;p&gt;In addition to adding tasks, we will let the user be able to click a button to send an email. This code will just perform a basic &lt;code&gt;Meteor.call&lt;/code&gt; which will call into our template generating and email sending code on the server. You can see the two files, &lt;code&gt;index.html&lt;/code&gt; and &lt;code&gt;index.js&lt;/code&gt; below:&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/831b9cb8df0e9c849adb.js&quot;&gt;&lt;/script&gt;

&lt;script src=&quot;https://gist.github.com/quackware/57643c6fe549eab61695.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;Hopefully this helps our anyone that was interested in how to send template emails from the server with mailgun. Again the full code for this tutorial is available &lt;a href=&quot;https://github.com/quackware/meteor-template-email&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please leave them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - Windows update cannot convert null to object</title>
   <link href="http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object/"/>
   <updated>2015-07-23T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object</id>
   <content type="html">&lt;h2 id=&quot;cannot-convert-null-to-object&quot;&gt;Cannot Convert Null To Object&lt;/h2&gt;

&lt;p&gt;While attempting to update one of my meteor projects on my windows box, I ran into the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NvtJjoq.png&quot; alt=&quot;Cannot convert null to object&quot; title=&quot;Cannot convert null to object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Attempting to update the meteor binary through &lt;code&gt;meteor update&lt;/code&gt; yielded the same error.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix&quot;&gt;How to Fix&lt;/h2&gt;

&lt;p&gt;In order to fix the error, I actually had to completely uninstall meteor and reinstall from &lt;a href=&quot;https://win.meteor.com/&quot;&gt;https://win.meteor.com/&lt;/a&gt;. After everything was installed, &lt;code&gt;meteor update&lt;/code&gt; worked fine. Hope this helps anyone encountering the same problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to use iron:router waitOn with an Async Server Call</title>
   <link href="http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server/"/>
   <updated>2015-05-04T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server</id>
   <content type="html">&lt;h2 id=&quot;how-to-use-ironrouter-waiton-with-an-async-server-call&quot;&gt;How to use iron:router waitOn with an Async Server Call&lt;/h2&gt;

&lt;p&gt;There have been several &lt;a href=&quot;http://stackoverflow.com/questions/29493809/how-to-make-onbeforeaction-call-wait-until-a-function-call-inside-finishes-in-me/&quot;&gt;posts&lt;/a&gt; about utilizing iron:router’s &lt;code&gt;waitOn&lt;/code&gt; functionality for an async server call. After being disatisfied with a lot of the solutions, including my own in the aforementioned stackoverflow post, I decided to write up a simple solution that had a minimal amount of extra code in the routes file. A couple of problems that I (and many others) ran into included the &lt;code&gt;waitOn&lt;/code&gt; function running in an &lt;a href=&quot;http://stackoverflow.com/questions/25136239/meteor-0-8-3-iron-router-infinite-loop-inside-waiton-hook&quot;&gt;infinite loop&lt;/a&gt;, and also &lt;code&gt;waitOn&lt;/code&gt; &lt;a href=&quot;https://github.com/iron-meteor/iron-router/issues/1031&quot;&gt;executing twice&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;client-routes-file&quot;&gt;Client Routes File&lt;/h2&gt;

&lt;p&gt;The client routes.js file is very simple, as the core functionality is contained in a different file. Basically what I am doing is returning a &lt;code&gt;Util.waitOnServer&lt;/code&gt; call which will call the &lt;code&gt;testWaitOn&lt;/code&gt; Meteor method on the server. You can optionally pass in arguments to &lt;code&gt;Util.waitOnServer&lt;/code&gt; to pass data to the Meteor method. Once this call returns, we can then access the data through &lt;code&gt;Util.getResponse&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/71290757e28d7df89540.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;utilwaitonserver&quot;&gt;Util.waitOnServer&lt;/h2&gt;

&lt;p&gt;The Util object contains all the functionality of waiting on &lt;code&gt;Meteor.call&lt;/code&gt;. Functionality such as &lt;code&gt;getResponse&lt;/code&gt; can be easily changed to something more eloquent, and you can also change the &lt;code&gt;Meteor.call&lt;/code&gt; to be any async call. The arugments from &lt;code&gt;Util.waitOnServer&lt;/code&gt; are forwarded to the Meteor method here.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/eea7818fde0cda6a35c3.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is very simple, it just generates a random number and returns it. I also printed out the &lt;code&gt;data&lt;/code&gt; argument passed to us from the client. I just wanted a way to make sure everything was being executed in the correct order.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/703e6cf54c24f7f9b16f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The full source code is available &lt;a href=&quot;https://github.com/quackware/meteor-waitOnServer&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please post them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Trigger a Function when a Session Value Changes</title>
   <link href="http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable/"/>
   <updated>2015-04-27T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable</id>
   <content type="html">&lt;h2 id=&quot;how-to-trigger-a-function-when-a-session-value-changes&quot;&gt;How to Trigger a Function when a Session Value Changes&lt;/h2&gt;

&lt;p&gt;While working on a Meteor project, I wanted to trigger a function whenever I changed the value of a Session variable through &lt;code&gt;Session.set()&lt;/code&gt;. It took me a little bit of experimentation and digging to figure out how to do it, and the result is pretty simple.&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-it&quot;&gt;How to do it&lt;/h2&gt;

&lt;p&gt;Use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var doSomething = function() {
  // Do something when the session value changes
}

Deps.autorun(function() {
  var sessionVal = Session.get(&quot;yourSessionVariable&quot;);
  console.log(&quot;The session value has changed&quot;);
  doSomething();
});

var anotherFunction = function() {
  Session.set(&quot;yourSessionVariable&quot;, &quot;foo&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Whenever &lt;code&gt;anotherFunction&lt;/code&gt; is executed, or whenever the session value &lt;code&gt;yourSessionVariable&lt;/code&gt; is changed in any other function, the function in the &lt;code&gt;Deps.autorun()&lt;/code&gt; block will execute. Simple!&lt;/p&gt;

&lt;h2 id=&quot;depsautorun&quot;&gt;Deps.autoRun&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Deps.autoRun()&lt;/code&gt; is the key here, as it can make arbitrary blocks of code reactive. &lt;code&gt;Session&lt;/code&gt; is already a reactive variable, so we do not need to go through the trouble of using &lt;code&gt;Deps.Dependency&lt;/code&gt;. You can find more information about Deps &lt;a href=&quot;https://manual.meteor.com/#deps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to point a domain on Google Domains to GitHub pages</title>
   <link href="http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains/"/>
   <updated>2015-04-12T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains</id>
   <content type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-repository&quot;&gt;Setup repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-google-domains&quot;&gt;Configure Google Domains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When setting up my &lt;a href=&quot;http://www.curtismlarson.com&quot;&gt;website&lt;/a&gt; on Google Domains I had to read through several different guides to figure out all I needed to do to point it to a GitHub pages repository. I wrote up this guide to simplify the processes for anyone else performing this same task.&lt;/p&gt;

&lt;h2 id=&quot;setup-repository&quot;&gt;Setup repository&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt; and create a repository with the name &lt;strong&gt;USERNAME.github.com&lt;/strong&gt; or &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; and give it a nice description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zQ5BxEH.png&quot; alt=&quot;Create a repository&quot; title=&quot;Create a repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your new repository, create a &lt;strong&gt;CNAME&lt;/strong&gt; file in the root directory and add the following two entries (with curtismlarson replaced by your own domain):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LR37up5.png&quot; alt=&quot;CName&quot; title=&quot;CName&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These two entries tell GitHub to redirect any requests to &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; to the domain specified in the CNAME file. There are two entries to ensure that &lt;strong&gt;curtismlarson.com&lt;/strong&gt; will also redirect to &lt;strong&gt;www.curtismlarson.com&lt;/strong&gt;. If you prefer to have a site without the &lt;strong&gt;www&lt;/strong&gt; prefix, you can switch the order of the domains.&lt;/p&gt;

&lt;p&gt;Now verify that your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; domain is now pointing to your custom domain by going into the repository settings and verifying your GitHub Pages settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RsA5XUO.png&quot; alt=&quot;Github Pages&quot; title=&quot;GitHub Pages&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-google-domains&quot;&gt;Configure Google Domains&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://domains.google.com/registrar&quot;&gt;https://domains.google.com/registrar&lt;/a&gt; and select the &lt;strong&gt;DNS&lt;/strong&gt; option to configure your DNS records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oA40Qkq.png&quot; alt=&quot;Google Domains&quot; title=&quot;Google Domains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the very bottom of the page and add 3 Custom Resource Records. You need to add two “@” type A records that point to the GitHub ips &lt;strong&gt;192.30.252.153&lt;/strong&gt; and &lt;strong&gt;192.30.252.154&lt;/strong&gt; and one “www” CNAME record that points to your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; url:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xO3At1V.png&quot; alt=&quot;Custom Resource Records&quot; title=&quot;Custom Resource Records&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! DNS records often take more than a day to propagate so you may not see your website immediately. Once the changes have propagated your GitHub page and any project pages should be accessible from your new domain. For example &lt;a href=&quot;https://github.com/quackware/blog&quot;&gt;https://github.com/quackware/blog&lt;/a&gt; is hosting the blog you are reading right now and the domain works without any additional setup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Introduction</title>
   <link href="http://curtismlarson.com/blog/2015/04/11/introduction/"/>
   <updated>2015-04-11T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/11/introduction</id>
   <content type="html">&lt;p&gt;I’ll be using this site to talk about Software Development and what projects I’m working on. More to come!&lt;/p&gt;
</content>
 </entry>
 

</feed>
