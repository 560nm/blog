<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>Curtis Larson's Blog</title>
 <link href="http://curtismlarson.com/blog/atom.xml" rel="self"/>
 <link href="http://curtismlarson.com/blog"/>
 <updated>2015-07-23T09:21:10-04:00</updated>
 <id>http://curtismlarson.com/blog</id>
 <author>
   <name></name>
   <email></email>
 </author>

 
 <entry>xw
   <title>Meteor - Windows update cannot convert null to object</title>
   <link href="http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object/"/>
   <updated>2015-07-23T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/07/23/windows-meteor-update-cannot-convert-null-to-object</id>
   <content type="html">&lt;h2 id=&quot;cannot-convert-null-to-object&quot;&gt;Cannot Convert Null To Object&lt;/h2&gt;

&lt;p&gt;While attempting to update one of my meteor projects on my windows box, I ran into the following error:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/NvtJjoq.png&quot; alt=&quot;Cannot convert null to object&quot; title=&quot;Cannot convert null to object&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Attempting to update the meteor binary through &lt;code&gt;meteor update&lt;/code&gt; yielded the same error.&lt;/p&gt;

&lt;h2 id=&quot;how-to-fix&quot;&gt;How to Fix&lt;/h2&gt;

&lt;p&gt;In order to fix the error, I actually had to completely uninstall meteor and reinstall from &lt;a href=&quot;https://win.meteor.com/&quot;&gt;https://win.meteor.com/&lt;/a&gt;. After everything was installed, &lt;code&gt;meteor update&lt;/code&gt; worked fine. Hope this helps anyone encountering the same problem!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to use iron:router waitOn with an Async Server Call</title>
   <link href="http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server/"/>
   <updated>2015-05-04T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/05/04/meteor-ironrouter-waitOn-server</id>
   <content type="html">&lt;h2 id=&quot;how-to-use-ironrouter-waiton-with-an-async-server-call&quot;&gt;How to use iron:router waitOn with an Async Server Call&lt;/h2&gt;

&lt;p&gt;There have been several &lt;a href=&quot;http://stackoverflow.com/questions/29493809/how-to-make-onbeforeaction-call-wait-until-a-function-call-inside-finishes-in-me/&quot;&gt;posts&lt;/a&gt; about utilizing iron:router’s &lt;code&gt;waitOn&lt;/code&gt; functionality for an async server call. After being disatisfied with a lot of the solutions, including my own in the aforementioned stackoverflow post, I decided to write up a simple solution that had a minimal amount of extra code in the routes file. A couple of problems that I (and many others) ran into included the &lt;code&gt;waitOn&lt;/code&gt; function running in an &lt;a href=&quot;http://stackoverflow.com/questions/25136239/meteor-0-8-3-iron-router-infinite-loop-inside-waiton-hook&quot;&gt;infinite loop&lt;/a&gt;, and also &lt;code&gt;waitOn&lt;/code&gt; &lt;a href=&quot;https://github.com/iron-meteor/iron-router/issues/1031&quot;&gt;executing twice&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;client-routes-file&quot;&gt;Client Routes File&lt;/h2&gt;

&lt;p&gt;The client routes.js file is very simple, as the core functionality is contained in a different file. Basically what I am doing is returning a &lt;code&gt;Util.waitOnServer&lt;/code&gt; call which will call the &lt;code&gt;testWaitOn&lt;/code&gt; Meteor method on the server. You can optionally pass in a second argument to &lt;code&gt;Util.waitOnServer&lt;/code&gt; to pass data to the Meteor method. Once this call returns, we can then access the data through &lt;code&gt;Util.getResponse&lt;/code&gt;.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/71290757e28d7df89540.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;utilwaitonserver&quot;&gt;Util.waitOnServer&lt;/h2&gt;

&lt;p&gt;The Util object contains all the functionality of waiting on &lt;code&gt;Meteor.call&lt;/code&gt;. Functionality such as &lt;code&gt;getResponse&lt;/code&gt; can be easily changed to something more eloquent, and you can also change the &lt;code&gt;Meteor.call&lt;/code&gt; to be any async call. The &lt;code&gt;data&lt;/code&gt; arugment from &lt;code&gt;Util.waitOnServer&lt;/code&gt; is forwarded to the Meteor method here.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/eea7818fde0cda6a35c3.js&quot;&gt;&lt;/script&gt;

&lt;h2 id=&quot;server-code&quot;&gt;Server Code&lt;/h2&gt;

&lt;p&gt;The server code is very simple, it just generates a random number and returns it. I also printed out the &lt;code&gt;data&lt;/code&gt; argument passed to us from the client. I just wanted a way to make sure everything was being executed in the correct order.&lt;/p&gt;

&lt;script src=&quot;https://gist.github.com/quackware/703e6cf54c24f7f9b16f.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;The full source code is available &lt;a href=&quot;https://github.com/quackware/meteor-waitOnServer&quot;&gt;on my GitHub page&lt;/a&gt;. If you have any questions please post them in the comments!&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Meteor - How to Trigger a Function when a Session Value Changes</title>
   <link href="http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable/"/>
   <updated>2015-04-27T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/27/meteor-trigger-function-with-session-variable</id>
   <content type="html">&lt;h2 id=&quot;how-to-trigger-a-function-when-a-session-value-changes&quot;&gt;How to Trigger a Function when a Session Value Changes&lt;/h2&gt;

&lt;p&gt;While working on a Meteor project, I wanted to trigger a function whenever I changed the value of a Session variable through &lt;code&gt;Session.set()&lt;/code&gt;. It took me a little bit of experimentation and digging to figure out how to do it, and the result is pretty simple.&lt;/p&gt;

&lt;h2 id=&quot;how-to-do-it&quot;&gt;How to do it&lt;/h2&gt;

&lt;p&gt;Use the following code:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var doSomething = function() {
  // Do something when the session value changes
}

Deps.autorun(function() {
  var sessionVal = Session.get(&quot;yourSessionVariable&quot;);
  console.log(&quot;The session value has changed&quot;);
  doSomething();
});

var anotherFunction = function() {
  Session.set(&quot;yourSessionVariable&quot;, &quot;foo&quot;);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That’s it! Whenever &lt;code&gt;anotherFunction&lt;/code&gt; is executed, or whenever the session value &lt;code&gt;yourSessionVariable&lt;/code&gt; is changed in any other function, the function in the &lt;code&gt;Deps.autorun()&lt;/code&gt; block will execute. Simple!&lt;/p&gt;

&lt;h2 id=&quot;depsautorun&quot;&gt;Deps.autoRun&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;Deps.autoRun()&lt;/code&gt; is the key here, as it can make arbitrary blocks of code reactive. &lt;code&gt;Session&lt;/code&gt; is already a reactive variable, so we do not need to go through the trouble of using &lt;code&gt;Deps.Dependency&lt;/code&gt;. You can find more information about Deps &lt;a href=&quot;https://manual.meteor.com/#deps&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>How to point a domain on Google Domains to GitHub pages</title>
   <link href="http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains/"/>
   <updated>2015-04-12T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/12/github-pages-google-domains</id>
   <content type="html">&lt;h1 id=&quot;table-of-contents&quot;&gt;Table of Contents&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;&lt;a href=&quot;#introduction&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#setup-repository&quot;&gt;Setup repository&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#configure-google-domains&quot;&gt;Configure Google Domains&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#conclusion&quot;&gt;Conclusion&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;introduction&quot;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;When setting up my &lt;a href=&quot;http://www.curtismlarson.com&quot;&gt;website&lt;/a&gt; on Google Domains I had to read through several different guides to figure out all I needed to do to point it to a GitHub pages repository. I wrote up this guide to simplify the processes for anyone else performing this same task.&lt;/p&gt;

&lt;h2 id=&quot;setup-repository&quot;&gt;Setup repository&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://github.com/new&quot;&gt;https://github.com/new&lt;/a&gt; and create a repository with the name &lt;strong&gt;USERNAME.github.com&lt;/strong&gt; or &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; and give it a nice description.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/zQ5BxEH.png&quot; alt=&quot;Create a repository&quot; title=&quot;Create a repository&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In your new repository, create a &lt;strong&gt;CNAME&lt;/strong&gt; file in the root directory and add the following two entries (with curtismlarson replaced by your own domain):&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/LR37up5.png&quot; alt=&quot;CName&quot; title=&quot;CName&quot; /&gt;&lt;/p&gt;

&lt;p&gt;These two entries tell GitHub to redirect any requests to &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; to the domain specified in the CNAME file. There are two entries to ensure that &lt;strong&gt;curtismlarson.com&lt;/strong&gt; will also redirect to &lt;strong&gt;www.curtismlarson.com&lt;/strong&gt;. If you prefer to have a site without the &lt;strong&gt;www&lt;/strong&gt; prefix, you can switch the order of the domains.&lt;/p&gt;

&lt;p&gt;Now verify that your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; domain is now pointing to your custom domain by going into the repository settings and verifying your GitHub Pages settings:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/RsA5XUO.png&quot; alt=&quot;Github Pages&quot; title=&quot;GitHub Pages&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;configure-google-domains&quot;&gt;Configure Google Domains&lt;/h2&gt;

&lt;p&gt;Navigate to &lt;a href=&quot;https://domains.google.com/registrar&quot;&gt;https://domains.google.com/registrar&lt;/a&gt; and select the &lt;strong&gt;DNS&lt;/strong&gt; option to configure your DNS records.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/oA40Qkq.png&quot; alt=&quot;Google Domains&quot; title=&quot;Google Domains&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Scroll to the very bottom of the page and add 3 Custom Resource Records. You need to add two “@” type A records that point to the GitHub ips &lt;strong&gt;192.30.252.153&lt;/strong&gt; and &lt;strong&gt;192.30.252.154&lt;/strong&gt; and one “www” CNAME record that points to your &lt;strong&gt;USERNAME.github.io&lt;/strong&gt; url:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/xO3At1V.png&quot; alt=&quot;Custom Resource Records&quot; title=&quot;Custom Resource Records&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;That’s it! DNS records often take more than a day to propagate so you may not see your website immediately. Once the changes have propagated your GitHub page and any project pages should be accessible from your new domain. For example &lt;a href=&quot;https://github.com/quackware/blog&quot;&gt;https://github.com/quackware/blog&lt;/a&gt; is hosting the blog you are reading right now and the domain works without any additional setup.&lt;/p&gt;
</content>
 </entry>
 
 <entry>xw
   <title>Introduction</title>
   <link href="http://curtismlarson.com/blog/2015/04/11/introduction/"/>
   <updated>2015-04-11T00:00:00-04:00</updated>
   <id>http://curtismlarson.com/blog/2015/04/11/introduction</id>
   <content type="html">&lt;p&gt;I’ll be using this site to talk about Software Development and what projects I’m working on. More to come!&lt;/p&gt;
</content>
 </entry>
 

</feed>
